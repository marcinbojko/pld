# start vscode extensions block
- name: Install vscode extensions
  tags:
    - optional
    - user
    - vscode
    - extensions
  when: pld_install_vscode_extensions is defined and pld_install_vscode_extensions
  block:
    - name: Remove obsolete vscode extensions
      ansible.builtin.shell: "code --uninstall-extension {{ item }} | true"
      any_errors_fatal: false
      ignore_errors: true
      loop: "{{ pld_vscode_obsolete }}"
      become: true
      become_user: "{{ pld_active_user }}"
      register: r_remove_obsolete_extensions
      changed_when: "'was successfully uninstalled!' in r_remove_obsolete_extensions.stdout"
    - name: Install_missing_extensions
      ansible.builtin.shell: if [ ! $(code --list-extensions | grep {{ item }}) ]; then code --install-extension {{ item }} --force; fi
      loop: "{{ pld_vscode }}"
      register: r_install_extension
      retries: "{{ pld_retries_count }}"
      delay: "{{ pld_delay_time }}"
      until: r_install_extension is success
      become: true
      become_user: "{{ pld_active_user }}"
      changed_when: r_install_extension.stdout | length > 0
      any_errors_fatal: false
      ignore_errors: true
  rescue:
    - name: Log failed extensions
      ansible.builtin.debug:
        msg: >
          Failed to process extensions.
          Uninstall results: {{ r_remove_obsolete_extensions | default('N/A') }}
          Install results: {{ r_install_extension | default('N/A') }}

    - name: Notify about retry options
      ansible.builtin.debug:
        msg: "You can try installing extensions manually or rerun the playbook"

  always:
    - name: Verify installed extensions
      ansible.builtin.shell: code --list-extensions
      register: current_extensions
      become: true
      become_user: "{{ pld_active_user }}"
      changed_when: false
      ignore_errors: true

    - name: Show current extensions
      ansible.builtin.debug:
        msg: "Current VS Code extensions: {{ current_extensions.stdout_lines | default([]) }}"
